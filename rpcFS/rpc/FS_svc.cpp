/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "FS.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif

static void
init_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		int fill;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Init:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_void;
		local = (char *(*)(char *, struct svc_req *)) init_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
getcursetnoerr_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		int fill;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case GetcurSetnoerr:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_GetcurSetnoerr_re;
		local = (char *(*)(char *, struct svc_req *)) getcursetnoerr_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
ls_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		int fill;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Ls:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_Ls_re;
		local = (char *(*)(char *, struct svc_req *)) ls_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
fopen_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Fopen_s fopen_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Fopen:
		_xdr_argument = (xdrproc_t) xdr_Fopen_s;
		_xdr_result = (xdrproc_t) xdr_Fopen_re;
		local = (char *(*)(char *, struct svc_req *)) fopen_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
fclose_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Fclose_s fclose_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Fclose:
		_xdr_argument = (xdrproc_t) xdr_Fclose_s;
		_xdr_result = (xdrproc_t) xdr_Fclose_re;
		local = (char *(*)(char *, struct svc_req *)) fclose_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
fread_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Fread_s fread_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Fread:
		_xdr_argument = (xdrproc_t) xdr_Fread_s;
		_xdr_result = (xdrproc_t) xdr_Fread_re;
		local = (char *(*)(char *, struct svc_req *)) fread_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
fwrite_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Fwrite_s fwrite_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Fwrite:
		_xdr_argument = (xdrproc_t) xdr_Fwrite_s;
		_xdr_result = (xdrproc_t) xdr_Fwrite_re;
		local = (char *(*)(char *, struct svc_req *)) fwrite_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
flseek_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Flseek_s flseek_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Flseek:
		_xdr_argument = (xdrproc_t) xdr_Flseek_s;
		_xdr_result = (xdrproc_t) xdr_Flseek_re;
		local = (char *(*)(char *, struct svc_req *)) flseek_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
fcreate_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Fcreate_s fcreate_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Fcreate:
		_xdr_argument = (xdrproc_t) xdr_Fcreate_s;
		_xdr_result = (xdrproc_t) xdr_Fcreate_re;
		local = (char *(*)(char *, struct svc_req *)) fcreate_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
mkdir_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Mkdir_s mkdir_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Mkdir:
		_xdr_argument = (xdrproc_t) xdr_Mkdir_s;
		_xdr_result = (xdrproc_t) xdr_Mkdir_re;
		local = (char *(*)(char *, struct svc_req *)) mkdir_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
fdelete_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Fdelete_s fdelete_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Fdelete:
		_xdr_argument = (xdrproc_t) xdr_Fdelete_s;
		_xdr_result = (xdrproc_t) xdr_Fdelete_re;
		local = (char *(*)(char *, struct svc_req *)) fdelete_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
cd_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		Cd_s cd_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Cd:
		_xdr_argument = (xdrproc_t) xdr_Cd_s;
		_xdr_result = (xdrproc_t) xdr_Cd_re;
		local = (char *(*)(char *, struct svc_req *)) cd_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static void
shutdown_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		int fill;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case Shutdown:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_Shutdown_re;
		local = (char *(*)(char *, struct svc_req *)) shutdown_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

int
main (int argc, char **argv)
{
	register SVCXPRT *transp;

	pmap_unset (Init_PROG, Init_VERS);
	pmap_unset (GetcurSetnoerr_PROG, GetcurSetnoerr_VERS);
	pmap_unset (Ls_PROG, Ls_VERS);
	pmap_unset (Fopen_PROG, Fopen_VERS);
	pmap_unset (Fclose_PROG, Fclose_VERS);
	pmap_unset (Fread_PROG, Fread_VERS);
	pmap_unset (Fwrite_PROG, Fwrite_VERS);
	pmap_unset (Flseek_PROG, Flseek_VERS);
	pmap_unset (Fcreate_PROG, Fcreate_VERS);
	pmap_unset (Mkdir_PROG, Mkdir_VERS);
	pmap_unset (Fdelete_PROG, Fdelete_VERS);
	pmap_unset (Cd_PROG, Cd_VERS);
	pmap_unset (Shutdown_PROG, Shutdown_VERS);

	transp = svcudp_create(RPC_ANYSOCK);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, Init_PROG, Init_VERS, init_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Init_PROG, Init_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, GetcurSetnoerr_PROG, GetcurSetnoerr_VERS, getcursetnoerr_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (GetcurSetnoerr_PROG, GetcurSetnoerr_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Ls_PROG, Ls_VERS, ls_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Ls_PROG, Ls_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Fopen_PROG, Fopen_VERS, fopen_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Fopen_PROG, Fopen_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Fclose_PROG, Fclose_VERS, fclose_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Fclose_PROG, Fclose_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Fread_PROG, Fread_VERS, fread_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Fread_PROG, Fread_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Fwrite_PROG, Fwrite_VERS, fwrite_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Fwrite_PROG, Fwrite_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Flseek_PROG, Flseek_VERS, flseek_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Flseek_PROG, Flseek_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Fcreate_PROG, Fcreate_VERS, fcreate_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Fcreate_PROG, Fcreate_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Mkdir_PROG, Mkdir_VERS, mkdir_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Mkdir_PROG, Mkdir_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Fdelete_PROG, Fdelete_VERS, fdelete_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Fdelete_PROG, Fdelete_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Cd_PROG, Cd_VERS, cd_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Cd_PROG, Cd_VERS, udp).");
		exit(1);
	}
	if (!svc_register(transp, Shutdown_PROG, Shutdown_VERS, shutdown_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (Shutdown_PROG, Shutdown_VERS, udp).");
		exit(1);
	}

	transp = svctcp_create(RPC_ANYSOCK, 0, 0);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create tcp service.");
		exit(1);
	}
	if (!svc_register(transp, Init_PROG, Init_VERS, init_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Init_PROG, Init_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, GetcurSetnoerr_PROG, GetcurSetnoerr_VERS, getcursetnoerr_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (GetcurSetnoerr_PROG, GetcurSetnoerr_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Ls_PROG, Ls_VERS, ls_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Ls_PROG, Ls_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Fopen_PROG, Fopen_VERS, fopen_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Fopen_PROG, Fopen_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Fclose_PROG, Fclose_VERS, fclose_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Fclose_PROG, Fclose_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Fread_PROG, Fread_VERS, fread_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Fread_PROG, Fread_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Fwrite_PROG, Fwrite_VERS, fwrite_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Fwrite_PROG, Fwrite_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Flseek_PROG, Flseek_VERS, flseek_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Flseek_PROG, Flseek_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Fcreate_PROG, Fcreate_VERS, fcreate_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Fcreate_PROG, Fcreate_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Mkdir_PROG, Mkdir_VERS, mkdir_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Mkdir_PROG, Mkdir_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Fdelete_PROG, Fdelete_VERS, fdelete_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Fdelete_PROG, Fdelete_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Cd_PROG, Cd_VERS, cd_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Cd_PROG, Cd_VERS, tcp).");
		exit(1);
	}
	if (!svc_register(transp, Shutdown_PROG, Shutdown_VERS, shutdown_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (Shutdown_PROG, Shutdown_VERS, tcp).");
		exit(1);
	}

	svc_run ();
	fprintf (stderr, "%s", "svc_run returned");
	exit (1);
	/* NOTREACHED */
}
