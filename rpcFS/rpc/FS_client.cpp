/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "FS.h"
#include <stdio.h>
#include <string.h>

void
init_prog_1(char *host)
{
	CLIENT *clnt;
	void  *result_1;
	char *init_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Init_PROG, Init_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = init_1((void*)&init_1_arg, clnt);
	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}

void
getcursetnoerr_prog_1(char *host,char name[50])
{
	CLIENT *clnt;
	GetcurSetnoerr_re  *result_1;
	char *getcursetnoerr_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, GetcurSetnoerr_PROG, GetcurSetnoerr_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = getcursetnoerr_1((void*)&getcursetnoerr_1_arg, clnt);
	if (result_1 == (GetcurSetnoerr_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(name,result_1->name);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
ls_prog_1(char *host,char name[1024])
{
	CLIENT *clnt;
	Ls_re  *result_1;
	char *ls_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Ls_PROG, Ls_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = ls_1((void*)&ls_1_arg, clnt);
	if (result_1 == (Ls_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	strcpy(name,result_1->name);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
fopen_prog_1(char *host,char name[50],char reMessage[100],int &fd)
{
	CLIENT *clnt;
	Fopen_re  *result_1;
	Fopen_s  fopen_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Fopen_PROG, Fopen_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	strcpy(fopen_1_arg.name,name);	

	result_1 = fopen_1(&fopen_1_arg, clnt);
	if (result_1 == (Fopen_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(reMessage,result_1->reMessage);
	fd = result_1->fd;
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
fclose_prog_1(char *host,int fd,char reMessage[100])
{
	CLIENT *clnt;
	Fclose_re  *result_1;
	Fclose_s  fclose_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Fclose_PROG, Fclose_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	fclose_1_arg.fd = fd;

	result_1 = fclose_1(&fclose_1_arg, clnt);
	if (result_1 == (Fclose_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(reMessage,result_1->reMessage);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
fread_prog_1(char *host,int fd,int length,char x[1024],int &count)
{
	CLIENT *clnt;
	Fread_re  *result_1;
	Fread_s  fread_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Fread_PROG, Fread_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	fread_1_arg.fd = fd;
	fread_1_arg.length = length;

	result_1 = fread_1(&fread_1_arg, clnt);
	if (result_1 == (Fread_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	memcpy(x,result_1->x,1024);
	count = result_1->count;
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
fwrite_prog_1(char *host,int fd,char x[1024],int length,char reMessage[100],int &count)
{
	CLIENT *clnt;
	Fwrite_re  *result_1;
	Fwrite_s  fwrite_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Fwrite_PROG, Fwrite_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	fwrite_1_arg.fd = fd;	
	memcpy(fwrite_1_arg.x,x,1024);
	fwrite_1_arg.length = length;
			
	result_1 = fwrite_1(&fwrite_1_arg, clnt);
	if (result_1 == (Fwrite_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	
	strcpy(reMessage,result_1->reMessage);
	count = result_1->count;
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
flseek_prog_1(char *host,int fd,int pos)
{
	CLIENT *clnt;
	Flseek_re  *result_1;
	Flseek_s  flseek_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Flseek_PROG, Flseek_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	flseek_1_arg.fd = fd;
	flseek_1_arg.pos = pos;
	
	result_1 = flseek_1(&flseek_1_arg, clnt);
	if (result_1 == (Flseek_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
fcreate_prog_1(char *host,char name[50],char reMessage[100],int &fd)
{
	CLIENT *clnt;
	Fcreate_re  *result_1;
	Fcreate_s  fcreate_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Fcreate_PROG, Fcreate_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	strcpy(fcreate_1_arg.name,name);

	result_1 = fcreate_1(&fcreate_1_arg, clnt);
	if (result_1 == (Fcreate_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(reMessage,result_1->reMessage);
	fd = result_1->fd;
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
mkdir_prog_1(char *host,char name[50],char reMessage[100])
{
	CLIENT *clnt;
	Mkdir_re  *result_1;
	Mkdir_s  mkdir_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Mkdir_PROG, Mkdir_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	strcpy(mkdir_1_arg.name,name);

	result_1 = mkdir_1(&mkdir_1_arg, clnt);
	if (result_1 == (Mkdir_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(reMessage,result_1->reMessage);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
fdelete_prog_1(char *host,char name[50],char reMessage[100])
{
	CLIENT *clnt;
	Fdelete_re  *result_1;
	Fdelete_s  fdelete_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Fdelete_PROG, Fdelete_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	strcpy(fdelete_1_arg.name,name);

	result_1 = fdelete_1(&fdelete_1_arg, clnt);
	if (result_1 == (Fdelete_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(reMessage,result_1->reMessage);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
cd_prog_1(char *host,char name[50],char reMessage[100])
{
	CLIENT *clnt;
	Cd_re  *result_1;
	Cd_s  cd_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Cd_PROG, Cd_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	strcpy(cd_1_arg.name,name);

	result_1 = cd_1(&cd_1_arg, clnt);
	if (result_1 == (Cd_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	strcpy(reMessage,result_1->reMessage);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


void
shutdown_prog_1(char *host)
{
	CLIENT *clnt;
	Shutdown_re  *result_1;
	char *shutdown_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, Shutdown_PROG, Shutdown_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = shutdown_1((void*)&shutdown_1_arg, clnt);
	if (result_1 == (Shutdown_re *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}




void myfs_HelpMenu()
{
    printf("1.ls\n");;
    printf("\t Usage:ls\n");
    printf("\t Description:Display a list of files in the current directory\n");
    
    printf("2.fopen\n");;
    printf("\t Usage:fopen [name]\n");
    printf("\t Description:Open a file named 'name'\n");
    
    printf("3.fclose\n");;
    printf("\t Usage:fclose [fd]\n");
    printf("\t Description:Close files with file descriptor 'fd'\n");
    
    printf("4.fread\n");;
    printf("\t Usage:fread [fd] [length]\n");
    printf("\t Description:Read length bytes from the file descriptor 'fd' and output them to the screen\n");
    
    printf("5.fwrite\n");;
    printf("\t Usage:fwrite [fd] [string]\n");
    printf("\t Description:Write the string to a 'file' with file descriptor 'fd'\n");
    
    printf("6.flseek\n");;
    printf("\t Usage:flseek [fd] [offset]\n");
    printf("\t Description:Move the pointer of the file descriptor 'fd' to 'offset'\n");

    printf("7.fcreate\n");;
    printf("\t Usage:fcreate [name]\n");
    printf("\t Description:Create a regular file named 'name'\n");
    
    printf("8.mkdir\n");;
    printf("\t Usage:mkdir [name]\n");
    printf("\t Description:Create a directory file named 'name'\n");
    
    printf("9.fdelete\n");;
    printf("\t Usage:fdelete [name]\n");
    printf("\t Description:Delete file named 'name'\n");
    
    printf("10.cd\n");;
    printf("\t Usage:cd [name]\n");
    printf("\t Description:Change the current working directory of the file system session to 'name'\n");
    
    printf("11.fin\n");;
    printf("\t Usage:fin [extername] [intername]\n");
    printf("\t Description:Store an external file named 'extername' into the SecondaryFS, and an internal file named 'intername' \n");

    printf("12.fout\n");;
    printf("\t Usage:fout [intername] [extername]\n");
    printf("\t Description:Write an internal file named 'intername' to an external file named 'extername'\n");

    printf("13.shutdown\n");;
    printf("\t Usage:shutdown\n");
    printf("\t Description:Safely shut down the SecondaryFS. Write dirty cache back to mirror file\n");

    printf("14.exit\n");
    printf("\t Usage:exit\n");
    printf("\t Description:Close the program SecondaryFS. Equivalent to power outage, file system will lose data\n");

    printf("15.help\n");;
    printf("\t Usage:help\n");
    printf("\t Description:Get Help Menu\n");

}



int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
        init_prog_1(host);
	printf("FileSystem Init down\n");
	printf("welcome to me SecondFileSystem! Input 'help' to get more imformation!\n");
	 while(1){
		char curdir[50];
		getcursetnoerr_prog_1(host,curdir);
		printf("[%s]# ", curdir);

                char op[50];
                scanf("%s",op);
		//1 ls
                if(strcmp(op,"ls")==0){
			char name[1024];
                        ls_prog_1 (host,name);
			printf("%s\n",name);
                }   
	        //2 - fopen
		else if(strcmp(op,"fopen")==0){
			char name[50];
			char reMessage[100];
			int fd;
			scanf("%s", name);
	    		fopen_prog_1(host,name,reMessage,fd);
			printf("%s",reMessage);
		}
		
		//3 - fclose
		else if(strcmp(op,"fclose")==0){
			int fd;
			char reMessage[100];
			scanf("%d", &fd);
			fclose_prog_1(host,fd,reMessage);
			printf("%s",reMessage);
		}
		
		//4 - fread
		else if(strcmp(op,"fread")==0){
			int fd;
			char buffer[1024] = {0};
			int length;
			int count;
			scanf("%d", &fd);
			scanf("%d", &length);
			fread_prog_1(host,fd,length,buffer,count);
			printf("fread:%s\n", buffer);
		}
		//5 - fwrite
		else if(strcmp(op,"fwrite")==0){
			int fd;
			char buffer[1024] = {0};
			int length;
			char reMessage[100];
			int count;
		 	scanf("%d", &fd);
			scanf("%s", buffer);
			length = strlen(buffer);
			fwrite_prog_1(host,fd,buffer,length,reMessage,count);
			printf("%s", reMessage);
		}
		//6 - flseek 
		else if(strcmp(op,"flseek")==0){
			int fd;
			int pos;
			scanf("%d", &fd);
			scanf("%d", &pos);
			flseek_prog_1(host,fd,pos);
		}
		//7 - fcreate
		else if(strcmp(op,"fcreate")==0){
			char name[50];
			char reMessage[100];
			int fd;
			scanf("%s", name);
	    		fcreate_prog_1(host,name,reMessage,fd);
			printf("%s",reMessage);
		}
		//8 - mkdir
		else if(strcmp(op,"mkdir")==0){
			char name[50];
			char reMessage[100];
			scanf("%s", name);
	    		mkdir_prog_1(host,name,reMessage);
			printf("%s",reMessage);
		}
		//9 - fdelete
		else if(strcmp(op,"fdelete")==0){
			char name[50];
			char reMessage[100];
			scanf("%s", name);
	    		fdelete_prog_1(host,name,reMessage);
			printf("%s",reMessage);
		}
		//10 - cd
		else if(strcmp(op,"cd")==0){
			char name[50];
			char reMessage[100];
			scanf("%s", name);
	    		cd_prog_1(host,name,reMessage);
			printf("%s",reMessage);
		}
		//11 - fin
		else if(strcmp(op,"fin")==0){
	                char intername[50];
			char extername[50];
			scanf("%s", extername);
			scanf("%s", intername);
			
			FILE *fp = fopen(extername, "rb");
		        if(fp==NULL){
				printf("%s not exist!\n",extername);
				continue;
		    	}
			char reMessage[100];
		        int fd;
			fcreate_prog_1(host,intername,reMessage,fd);
			
			char buffer[1024]={0};
			int num = fread(buffer, 1, 1024, fp);
			//printf("%d\n",num);
			while (num > 0)
			{
				int count;
			        fwrite_prog_1(host,fd,buffer,num,reMessage,count);
				num = fread(buffer, 1, 1024, fp);
				//printf("%d\n",num);
			}
		        if(fp!=NULL)
			    fclose(fp);
			fclose_prog_1(host,fd,reMessage);

		}
		//12 - fout
		else if(strcmp(op,"fout")==0){
		  	char intername[50];
			char extername[50];
			scanf("%s", intername);
			scanf("%s", extername);
			
			char reMessage[100];
			int fd;
			fopen_prog_1(host,intername,reMessage,fd);
			//printf("%s",reMessage);
			if(fd==-1){
				printf("%s not exist!\n",intername);
				continue;
			}

			char buffer[1024] = {0};
			FILE *fp = fopen(extername, "wb");
		        int count;
			fread_prog_1(host,fd,1024,buffer,count);
			//printf("%d\n",count);
		        while (count > 0)
			{
				fwrite(buffer, 1, count, fp);
				//for(int i=0;i<1024;i++){
				//	printf("%hx ",(unsigned short)(buffer[i]));
				//}
				fread_prog_1(host,fd,1024,buffer,count);
				//printf("%d\n",count);
			}
			if(fp!=NULL)
				fclose(fp);
			fclose_prog_1(host,fd,reMessage);
			//printf("%s",reMessage);
		}
		//13 - shutdown
		else if(strcmp(op,"shutdown")==0){
		    shutdown_prog_1(host);
		    break;
		}
		//14 - exit
		else if(strcmp(op,"exit")==0){
		    break;
		}

		//15 Help
		else if(strcmp(op,"help")==0){
			myfs_HelpMenu();
		}
		else{
			printf("\n");
		}


        }
exit (0);
}
